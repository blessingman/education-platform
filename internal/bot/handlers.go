package bot

import (
	"database/sql"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	model "github.com/blessingman/education-platform/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
func handleStart(b *Bot, message *tgbotapi.Message) {
	user, err := getUserByTelegramID(b.DB, int64(message.From.ID))
	if err != nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
		welcomeText := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –ø—Ä–æ–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register."
		msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
		b.Telegram.Send(msg)
		return
	}

	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω
	if user.Active {
		welcomeText := fmt.Sprintf("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, %s!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:", user.Name)
		keyboard := getMainMenuKeyboard(user.Role) // –ú–µ–Ω—é –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
		msg.ReplyMarkup = keyboard
		b.Telegram.Send(msg)
	} else {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
		msg := tgbotapi.NewMessage(message.Chat.ID, "üîî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
		b.Telegram.Send(msg)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
func handleRegister(b *Bot, message *tgbotapi.Message) {
	user, err := getUserByTelegramID(b.DB, int64(message.From.ID))
	if err == nil {
		if user.Active {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ %s.", user.Role))
			b.Telegram.Send(msg)
		} else {
			// –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
			_, err = b.DB.Exec(`UPDATE users SET active = TRUE WHERE telegram_id = $1`, user.TelegramID)
			if err != nil {
				msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
				b.Telegram.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
				b.Telegram.Send(msg)
			}
		}
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫
	msg := tgbotapi.NewMessage(message.Chat.ID, "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
	b.Telegram.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
func handleAdmin(b *Bot, message *tgbotapi.Message) {
	user, err := getUserByTelegramID(b.DB, int64(message.From.ID))
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		b.Telegram.Send(msg)
		return
	}

	if user.Role != "admin" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		b.Telegram.Send(msg)
		return
	}

	adminMenu := tgbotapi.NewMessage(message.Chat.ID, "‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
		"/add_passcode - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫\n"+
		"/add_schedule - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"+
		"/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
	b.Telegram.Send(adminMenu)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func handleMessage(b *Bot, message *tgbotapi.Message) {
	user, err := getUserByTelegramID(b.DB, int64(message.From.ID))
	if err != nil {
		handlePasscodeRegistration(b, message)
		return
	}

	switch message.Text {
	case "‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ":
		if user.Role == "admin" {
			handleAdmin(b, message)
		} else {
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
			b.Telegram.Send(msg)
		}
	case "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
		handleSchedule(b, message)
	case "üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤":
		handleListSubjects(b, message) // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	case "üë• –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø":
		handleListGroups(b, message) // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
	default:
		msgText := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"- üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"+
			"- üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"+
			"- üë• –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", user.Name)
		msg := tgbotapi.NewMessage(message.Chat.ID, msgText)
		b.Telegram.Send(msg)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
func getUserByTelegramID(db *sql.DB, telegramID int64) (*model.User, error) {
	var user model.User
	query := `SELECT id, telegram_id, name, email, role, active FROM users WHERE telegram_id = $1`
	err := db.QueryRow(query, telegramID).Scan(&user.ID, &user.TelegramID, &user.Name, &user.Email, &user.Role, &user.Active)
	if err != nil {
		return nil, err
	}

	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
	return &user, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func getMainMenuKeyboard(role string) tgbotapi.ReplyKeyboardMarkup {
	var buttons [][]tgbotapi.KeyboardButton

	// –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	buttons = append(buttons, tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
	))

	// –ö–Ω–æ–ø–∫–∞ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ" –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
	if role == "admin" {
		adminButtons := tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"),
		)
		buttons = append(buttons, adminButtons)
	}

	return tgbotapi.NewReplyKeyboard(buttons...)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—É—Å–∫
func handlePasscodeRegistration(b *Bot, message *tgbotapi.Message) {
	passcode := strings.TrimSpace(message.Text)

	matched, err := regexp.MatchString(`^(ST|TE|AD)-[A-Z0-9]{5}$`, passcode)
	if err != nil || !matched {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–ø—É—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø—Ä–æ–ø—É—Å–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		b.Telegram.Send(msg)
		return
	}

	var role string
	var isUsed bool
	query := `SELECT role, is_used FROM passcodes WHERE code = $1`
	err = b.DB.QueryRow(query, passcode).Scan(&role, &isUsed)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø—Ä–æ–ø—É—Å–∫ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		b.Telegram.Send(msg)
		return
	}

	if isUsed {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–ø—É—Å–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–ø—É—Å–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		b.Telegram.Send(msg)
		return
	}

	var assignedRole string
	switch {
	case strings.HasPrefix(passcode, "ST-"):
		assignedRole = "student"
	case strings.HasPrefix(passcode, "TE-"):
		assignedRole = "teacher"
	case strings.HasPrefix(passcode, "AD-"):
		assignedRole = "admin"
	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–ø—É—Å–∫–∞.")
		b.Telegram.Send(msg)
		return
	}

	_, err = b.DB.Exec(`INSERT INTO users (telegram_id, name, email, role) VALUES ($1, $2, $3, $4)`,
		int64(message.From.ID), message.From.UserName, "", assignedRole)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		b.Telegram.Send(msg)
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return
	}

	_, err = b.DB.Exec(`UPDATE passcodes SET is_used = TRUE, used_at = $1 WHERE code = $2`, time.Now(), passcode)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		b.Telegram.Send(msg)
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞: %v", err)
		return
	}

	welcomeText := fmt.Sprintf("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *%s*. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", assignedRole)
	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	msg.ParseMode = "Markdown"
	b.Telegram.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
func handleCallbackQuery(b *Bot, callback *tgbotapi.CallbackQuery) {
	var responseText string

	switch callback.Data {
	case "schedule_group":
		responseText = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–µ."
		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–µ
	case "schedule_teacher":
		responseText = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
	case "list_subjects":
		responseText = "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n"
		subjects, err := getSubjects(b.DB)
		if err != nil {
			responseText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤."
		} else {
			for _, subject := range subjects {
				responseText += fmt.Sprintf("- %s\n", subject.Name)
			}
		}
	case "list_groups":
		responseText = "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n"
		groups, err := getGroups(b.DB)
		if err != nil {
			responseText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø."
		} else {
			for _, group := range groups {
				responseText += fmt.Sprintf("- %s\n", group.Name)
			}
		}
	default:
		responseText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä."
	}

	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, responseText)
	b.Telegram.Send(msg)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
	callbackResponse := tgbotapi.NewCallback(callback.ID, "–í—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç")
	b.Telegram.AnswerCallbackQuery(callbackResponse)
}

func handleListSubjects(b *Bot, message *tgbotapi.Message) {
	subjects, err := getSubjects(b.DB)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
		b.Telegram.Send(msg)
		return
	}

	var subjectList string
	for _, subject := range subjects {
		subjectList += fmt.Sprintf("- %s\n", subject.Name)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n"+subjectList)
	b.Telegram.Send(msg)
}

func handleListGroups(b *Bot, message *tgbotapi.Message) {
	groups, err := getGroups(b.DB)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.")
		b.Telegram.Send(msg)
		return
	}

	var groupList string
	for _, group := range groups {
		groupList += fmt.Sprintf("- %s\n", group.Name)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "üë• –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n"+groupList)
	b.Telegram.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /logout
func handleLogout(b *Bot, message *tgbotapi.Message) {
	user, err := getUserByTelegramID(b.DB, int64(message.From.ID))
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
		b.Telegram.Send(msg)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏ —Å—Ç–∞—Ç—É—Å
	_, err = b.DB.Exec(`UPDATE users SET active = FALSE, last_logout = $1 WHERE telegram_id = $2`, time.Now(), user.TelegramID)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		b.Telegram.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
	b.Telegram.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
// –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏
func handleAddPasscode(b *Bot, message *tgbotapi.Message) {
	user, err := getUserByTelegramID(b.DB, int64(message.From.ID))
	if err != nil || user.Role != "admin" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		b.Telegram.Send(msg)
		return
	}

	args := strings.Split(message.CommandArguments(), " ")
	if len(args) != 2 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_passcode <–∫–æ–¥> <—Ä–æ–ª—å>")
		b.Telegram.Send(msg)
		return
	}

	code := args[0]
	role := args[1]

	if role != "student" && role != "teacher" && role != "admin" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: student, teacher –∏–ª–∏ admin.")
		b.Telegram.Send(msg)
		return
	}

	_, err = b.DB.Exec(`INSERT INTO passcodes (code, role) VALUES ($1, $2)`, code, role)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞.")
		b.Telegram.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–ø—É—Å–∫ %s –¥–ª—è —Ä–æ–ª–∏ %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", code, role))
	b.Telegram.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
func handleSchedule(b *Bot, message *tgbotapi.Message) {
	user, err := getUserByTelegramID(b.DB, int64(message.From.ID))
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
		b.Telegram.Send(msg)
		return
	}

	var keyboard tgbotapi.InlineKeyboardMarkup
	var buttons [][]tgbotapi.InlineKeyboardButton

	if user.Role == "student" || user.Role == "teacher" || user.Role == "admin" {
		if user.Role == "teacher" || user.Role == "admin" {
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìÖ –ü–æ –≥—Ä—É–ø–ø–µ", "schedule_group"),
				tgbotapi.NewInlineKeyboardButtonData("üî∏ –ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", "schedule_teacher"),
			))
		} else {
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìÖ –ü–æ –≥—Ä—É–ø–ø–µ", "schedule_group"),
			))
		}

		keyboard = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
	msg.ReplyMarkup = keyboard
	b.Telegram.Send(msg)
}

func handleAddSchedule(b *Bot, message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	user, err := getUserByTelegramID(b.DB, int64(message.From.ID))
	if err != nil || user.Role != "admin" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		b.Telegram.Send(msg)
		return
	}

	// –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
	groups := make(map[string]int)
	rows, err := b.DB.Query("SELECT id, name FROM groups")
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.")
		b.Telegram.Send(msg)
		return
	}
	defer rows.Close()

	var groupOptions string
	for rows.Next() {
		var id int
		var name string
		if err := rows.Scan(&id, &name); err == nil {
			groups[name] = id
			groupOptions += fmt.Sprintf("- %s\n", name)
		}
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n"+groupOptions)
	b.Telegram.Send(msg)

	// –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã
	var groupName string
	for update := range b.UpdateChannel {
		if update.Message != nil && update.Message.Chat.ID == message.Chat.ID {
			groupName = update.Message.Text
			break
		}
	}

	groupID, ok := groups[groupName]
	if !ok {
		b.Telegram.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))
		return
	}

	// –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	subjects := make(map[string]int)
	rows, err = b.DB.Query("SELECT id, name FROM subjects")
	if err != nil {
		b.Telegram.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤."))
		return
	}
	defer rows.Close()

	var subjectOptions string
	for rows.Next() {
		var id int
		var name string
		if err := rows.Scan(&id, &name); err == nil {
			subjects[name] = id
			subjectOptions += fmt.Sprintf("- %s\n", name)
		}
	}

	msg = tgbotapi.NewMessage(message.Chat.ID, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n"+subjectOptions)
	b.Telegram.Send(msg)

	// –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
	var subjectName string
	for update := range b.UpdateChannel {
		if update.Message != nil && update.Message.Chat.ID == message.Chat.ID {
			subjectName = update.Message.Text
			break
		}
	}

	subjectID, ok := subjects[subjectName]
	if !ok {
		b.Telegram.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
		return
	}

	// –®–∞–≥ 3: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
	b.Telegram.Send(tgbotapi.NewMessage(message.Chat.ID, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: YYYY-MM-DD HH:MM"))

	// –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
	var dateTimeStr string
	for update := range b.UpdateChannel {
		if update.Message != nil && update.Message.Chat.ID == message.Chat.ID {
			dateTimeStr = update.Message.Text
			break
		}
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
	parsedDateTime, err := time.Parse("2006-01-02 15:04", dateTimeStr)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM")
		b.Telegram.Send(msg)
		return
	}

	// –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
	var existingScheduleID int
	err = b.DB.QueryRow("SELECT id FROM schedules WHERE group_id = $1 AND subject_id = $2 AND date = $3 AND time = $4", groupID, subjectID, parsedDateTime.Format("2006-01-02"), parsedDateTime.Format("15:04")).Scan(&existingScheduleID)
	if err == nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
		b.Telegram.Send(msg)
		return
	}

	// –®–∞–≥ 5: –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	_, err = b.DB.Exec("INSERT INTO schedules (group_id, subject_id, date, time) VALUES ($1, $2, $3, $4)", groupID, subjectID, parsedDateTime.Format("2006-01-02"), parsedDateTime.Format("15:04"))
	if err != nil {
		b.Telegram.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."))
		return
	}

	b.Telegram.Send(tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"))
}

// getSubjects –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func getSubjects(db *sql.DB) ([]model.Subject, error) {
	var subjects []model.Subject

	rows, err := db.Query("SELECT id, name FROM subjects")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var subject model.Subject
		if err := rows.Scan(&subject.ID, &subject.Name); err != nil {
			return nil, err
		}
		subjects = append(subjects, subject)
	}

	return subjects, nil
}

// getGroups –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func getGroups(db *sql.DB) ([]model.Group, error) {
	var groups []model.Group

	rows, err := db.Query("SELECT id, name FROM groups")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var group model.Group
		if err := rows.Scan(&group.ID, &group.Name); err != nil {
			return nil, err
		}
		groups = append(groups, group)
	}

	return groups, nil
}
